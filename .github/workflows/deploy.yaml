name: CI/CD Deploy to EC2 with Rsync and PM2

on:
  push:
    branches:
      - Cx-document
  workflow_dispatch: 

env:
  PROJECT_NAME: cxonego-backend-main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: üßæ Checkout Code
      uses: actions/checkout@v3

    - name: üîß Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: ‚ôªÔ∏è Cache NPM Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: üì¶ Install Dependencies
      run: npm install

    - name: üèóÔ∏è Build Project
      run: npm run build

    - name: üìÇ List Build Output
      run: ls -la

    - name: üîÑ Rsync Files to EC2
      uses: Burnett01/rsync-deployments@5.2.1
      with:
        switches: -avz --delete --exclude='.env' --exclude='node_modules' --exclude='.git'
        path: ./  # Copy the entire project directory
        remote_path: /home/ubuntu/${{ env.PROJECT_NAME }}_deploy
        remote_host: ${{ secrets.HOST }}
        remote_user: ubuntu
        remote_key: ${{ secrets.SSH }}

    - name: ‚öôÔ∏è Deploy and Start with PM2 in Production Mode
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.SSH }}
        script: |
          # Load NVM to get access to the right environment
          export NVM_DIR="/home/ubuntu/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          
          # Navigate to deploy directory
          cd /home/ubuntu/${{ env.PROJECT_NAME }}_deploy
          
          # Create application directory and clear previous build
          mkdir -p /home/ubuntu/${{ env.PROJECT_NAME }}
          rm -rf /home/ubuntu/${{ env.PROJECT_NAME }}/*
          
          # Copy build directory with intact structure
          cp -r build /home/ubuntu/${{ env.PROJECT_NAME }}/
          
          # Copy ecosystem.config.js to the application directory
          cp ecosystem.config.js /home/ubuntu/${{ env.PROJECT_NAME }}/
          
          # Navigate to application directory
          cd /home/ubuntu/${{ env.PROJECT_NAME }}
          
          # Stop existing PM2 process if it exists
          pm2 delete ${{ env.PROJECT_NAME }} || true
          
          # Start the application with ecosystem.config.js in production mode
          pm2 start ecosystem.config.js --env production
          
          # Save PM2 process list to survive server restarts
          pm2 save
