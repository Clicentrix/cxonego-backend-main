name: CI/CD Deploy to EC2 with Rsync and PM2

on:
  push:
    branches:
      - Cx-document
  workflow_dispatch: 

env:
  PROJECT_NAME: cxonego-backend-main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 🧾 Checkout Code
      uses: actions/checkout@v3

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: ♻️ Cache NPM Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: 📦 Install Dependencies
      run: npm install

    - name: 🏗️ Build Project
      run: npm run build

    - name: 📂 List Build Output
      run: ls -la

    - name: 🔄 Rsync Build to EC2
      uses: Burnett01/rsync-deployments@5.2.1
      with:
        switches: -avz --delete --exclude='.env' --exclude='node_modules' --exclude='.git'
        path:  ./ # Adjust this to your actual build output directory
        remote_path: /home/ubuntu/${{ env.PROJECT_NAME }}
        remote_host: ${{ secrets.HOST }}
        remote_user: ubuntu
        remote_key: ${{ secrets.SSH }}

    - name: 📄 Copy ecosystem.config.js to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.SSH }}
        source: "ecosystem.config.js"
        target: "/home/ubuntu/${{ env.PROJECT_NAME }}/"

    - name: ⚙️ Set .env and Restart PM2 on EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.SSH }}
        script: |
          # Load NVM to get access to the right environment
          export NVM_DIR="/home/ubuntu/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          cd /home/ubuntu/${{ env.PROJECT_NAME }}
          pm2 reload ${{ env.PROJECT_NAME }} || pm2 start ecosystem.config.js --env production --name ${{ env.PROJECT_NAME }}